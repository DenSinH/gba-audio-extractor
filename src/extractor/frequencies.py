

gNoiseTable = [
    0xD7, 0xD6, 0xD5, 0xD4, 0xC7, 0xC6, 0xC5, 0xC4, 0xB7, 0xB6, 0xB5, 0xB4, 0xA7, 0xA6, 0xA5,
    0xA4, 0x97, 0x96, 0x95, 0x94, 0x87, 0x86, 0x85, 0x84, 0x77, 0x76, 0x75, 0x74, 0x67, 0x66,
    0x65, 0x64, 0x57, 0x56, 0x55, 0x54, 0x47, 0x46, 0x45, 0x44, 0x37, 0x36, 0x35, 0x34, 0x27,
    0x26, 0x25, 0x24, 0x17, 0x16, 0x15, 0x14, 0x07, 0x06, 0x05, 0x04, 0x03, 0x02, 0x01, 0x00,
]

def noise(key, fineAdjust=0):
    # fineAdjust is ignored
    if key <= 20:
        key = 0
    else:
        key -= 21
        if key > 59:
            key = 59
    freq = gNoiseTable[key]
    r = (freq & 7) or 0.5
    s = (freq & 0xf0) >> 4
    real_freq = 524288 / (r * 2 ** (s + 1))
    return real_freq

gCgbScaleTable = [
    0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16,
    0x17, 0x18, 0x19, 0x1A, 0x1B, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B, 0x30, 0x31,
    0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3A, 0x3B, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48,
    0x49, 0x4A, 0x4B, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x5B, 0x60, 0x61, 0x62, 0x63,
    0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A,
    0x7B, 0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8A, 0x8B, 0x90, 0x91, 0x92, 0x93, 0x94, 0x95,
    0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0xA0, 0xA1, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xAB,
]

gCgbFreqTable = [
    -2004, -1891, -1785, -1685, -1591, -1501, -1417, -1337, -1262, -1192, -1125, -1062,
]


def other(key, fineAdjust=0):
    if key < 35:
        fineAdjust = 0
        key = 0
    else:
        key -= 36
        if key > 130:
            key = 130
            fineAdjust = 255
    val1 = gCgbScaleTable[key]
    val1 = gCgbFreqTable[val1 & 0xF] >> (val1 >> 4)

    val2 = gCgbScaleTable[key + 1]
    val2 = gCgbFreqTable[val2 & 0xF] >> (val2 >> 4)

    written_value = val1 + ((fineAdjust * (val2 - val1)) >> 8) + 2048
    _freq = -131072 / (val1 + ((fineAdjust * (val2 - val1)) >> 8))

    # frequency based on calculation with Square channel
    freq = 131072 / (2048 - written_value)
    return freq


if __name__ == '__main__':
    # for key in range(256):
    #     if not (key & 0xf):
    #         print("\n    ", end="")
    #     print(f"{noise(key):.3f}, ", end="")

    for key in range(256):
        if not (key & 0xf):
            print("\n    ", end="")
        print(f"{noise(key):.3f}, ", end="")
    #
    # for key in range(256):
    #     if not (key & 0xf):
    #         print("\n    ", end="")
    #     print(f"{other(key):.3f}, ", end="")

