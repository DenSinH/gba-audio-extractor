MidiKeyToCgbFreq

##Channel 4 (noise):
if (key <= 20) {
    key = 0;
} else {
    key -= 21;
    if (key > 59)
        key = 59;
}

return gNoiseTable[key];

where

const u8 gNoiseTable[] = {
    0xD7, 0xD6, 0xD5, 0xD4, 0xC7, 0xC6, 0xC5, 0xC4, 0xB7, 0xB6, 0xB5, 0xB4, 0xA7, 0xA6, 0xA5,
    0xA4, 0x97, 0x96, 0x95, 0x94, 0x87, 0x86, 0x85, 0x84, 0x77, 0x76, 0x75, 0x74, 0x67, 0x66,
    0x65, 0x64, 0x57, 0x56, 0x55, 0x54, 0x47, 0x46, 0x45, 0x44, 0x37, 0x36, 0x35, 0x34, 0x27,
    0x26, 0x25, 0x24, 0x17, 0x16, 0x15, 0x14, 0x07, 0x06, 0x05, 0x04, 0x03, 0x02, 0x01, 0x00,
};

So first tick r then s in

400007Ch - SOUND4CNT_H (NR43, NR44) - Channel 4 Frequency/Control (R/W)
The amplitude is randomly switched between high and low at the given frequency. A higher frequency will make the noise to appear 'softer'.
When Bit 3 is set, the output will become more regular, and some frequencies will sound more like Tone than Noise.
  Bit        Expl.
  0-2   R/W  Dividing Ratio of Frequencies (r)
  3     R/W  Counter Step/Width (0=15 bits, 1=7 bits)
  4-7   R/W  Shift Clock Frequency (s)
  8-13  -    Not used
  14    R/W  Length Flag  (1=Stop output when length in NR41 expires)
  15    W    Initial      (1=Restart Sound)
  16-31 -    Not used
Frequency = 524288 Hz / r / 2^(s+1) ;For r=0 assume r=0.5 instead


##Other CGB Channels:

if (key <= 35) {
    fineAdjust = 0;
    key = 0;
} else {
    key -= 36;
    if (key > 130) {
        key = 130;
        fineAdjust = 255;
    }
}

val1 = gCgbScaleTable[key];
val1 = gCgbFreqTable[val1 & 0xF] >> (val1 >> 4);

val2 = gCgbScaleTable[key + 1];
val2 = gCgbFreqTable[val2 & 0xF] >> (val2 >> 4);

return val1 + ((fineAdjust * (val2 - val1)) >> 8) + 2048;

Where fineAdjust is track->pitM

and

const u8 gCgbScaleTable[] = {
    0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16,
    0x17, 0x18, 0x19, 0x1A, 0x1B, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B, 0x30, 0x31,
    0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3A, 0x3B, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48,
    0x49, 0x4A, 0x4B, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x5B, 0x60, 0x61, 0x62, 0x63,
    0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A,
    0x7B, 0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8A, 0x8B, 0x90, 0x91, 0x92, 0x93, 0x94, 0x95,
    0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0xA0, 0xA1, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xAB,
};

const s16 gCgbFreqTable[] = {
    -2004, -1891, -1785, -1685, -1591, -1501, -1417, -1337, -1262, -1192, -1125, -1062,
};

Frequency computed as
 - Square: 131072/(2048-n)Hz
 - Wave: sample rate 2097152/(2048-n) Hz

DirectSound:

if (key > 178) {
key = 178;
pitch = 255;
}

// Alternatively, note = key % 12 and octave = 14 - (key / 12)
u8 note = gScaleTable[key] & 0xF;
u8 octave = gScaleTable[key] >> 4;
u8 nextNote = gScaleTable[key + 1] & 0xF;
u8 nextOctave = gScaleTable[key + 1] >> 4;

u32 baseFreq1 = gFreqTable[note] >> octave;
u32 baseFreq2 = gFreqTable[nextNote] >> nextOctave;

u32 freqDifference = umul3232H32(baseFreq2 - baseFreq1, pitch << 24);
// This is added by me. The real GBA and GBA BIOS don't verify this address, and as a result the
// BIOS's memory can be dumped.
u32 freq = wav->freq;
return umul3232H32(freq, baseFreq1 + freqDifference);

where

const u8 gScaleTable[] = {
    0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5,
    0xD6, 0xD7, 0xD8, 0xD9, 0xDA, 0xDB, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB,
    0xB0, 0xB1, 0xB2, 0xB3, 0xB4, 0xB5, 0xB6, 0xB7, 0xB8, 0xB9, 0xBA, 0xBB, 0xA0, 0xA1, 0xA2, 0xA3, 0xA4, 0xA5,
    0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xAB, 0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B,
    0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8A, 0x8B, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75,
    0x76, 0x77, 0x78, 0x79, 0x7A, 0x7B, 0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B,
    0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x5B, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45,
    0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3A, 0x3B,
    0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15,
    0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B,
};

const u32 gFreqTable[] = {
    2147483648u, 2275179671u, 2410468894u, 2553802834u, 2705659852u, 2866546760u,
    3037000500u, 3217589947u, 3408917802u, 3611622603u, 3826380858u, 4053909305u,
};



Envelope for CGB channels:

attack/decay/release values: envelope step time in registers
 goes up from 0 to 15 with steps of 1 per set time (val/64s)

sustain: sustain volume on scale of 0 to 15

Envelope for PCM channel:

attack:  linear increment every frame until 255
decay:   exponential decay (/256) until sustain
sustain: sustain volume (0 to 255)
release: exponential until echovolume

echo: linear (-1) starting from echovolume, set by XIECV command

Example: bgmMinishCap, voice group 51,
         voice 0 in measure 33, track 5 (about 2400 ticks)


MOD/LFO/BEND:
bendRange initialized to 2

bend: set bend
bendr: set bend range

pitX, keyshiftX only set from outside the song data.
These are constants, and I will probably ignore them

ply_lfos: set lfo speed, ClearModM if 0 ()
ply_lfodl: set lfo delay, ClearModM when note starts ()
ply_mod: set mod, ClearModM if 0 ()
ply_modt: set mod type

ClearModM: set lfoSpeedC to 0, modM to 0, [flags depending on mod type]

mod type:
	.equ	mod_vib,0		@ vibrate
	.equ	mod_tre,1		@ tremolo
	.equ	mod_pan,2		@ auto-panpot
2 seems unused?

LFO: speed initialized to 22
     counter set to delay
     counter decremented every frame until 0
     when 0 (every frame):
        increment LFOSpeedC with LFOSpeed
        set modM to some calculation with MOD and LFOSpeedC

        if modT is 0 (default):
            s32 bend = track->bend * track->bendRange;
            s32 x = (track->tune + bend) * 4
                  + (track->keyShift << 8)
                  + (track->keyShiftX << 8)
                  + track->pitX;

            if (track->modT == 0) x += 16 * track->modM;

            track->keyM = x >> 8;
            track->pitM = (u8)x;
        else:
            s32 x;
            s32 y;

            x = (u32)(track->vol * track->volX) >> 5;
            if (track->modT == 1) x = (u32)(x * (track->modM + 128)) >> 7;
            y = 2 * track->pan + track->panX;
            if (track->modT == 2) y += track->modM;

            if (y < -128) y = -128;
            else if (y > 127) y = 127;

            track->volMR = (u32)((y + 128) * x) >> 8;
            track->volML = (u32)((127 - y) * x) >> 8;


Calculation for modM:
if (currentTrack->lfoSpeedC >= 0x40U && currentTrack->lfoSpeedC < 0xC0U) {
  r = 128 - currentTrack->lfoSpeedC;
} else if (currentTrack->lfoSpeedC >= 0xC0U) {
  // Unsigned -> signed casts where the value is out of range are implementation defined.
  // Why not add a few extra lines to make behavior the same for literally everyone?
  r = currentTrack->lfoSpeedC - 256;
} else {
  r = currentTrack->lfoSpeedC;
}
/* r graph over time:
 *  0x40
 *  /\
 * /  \
 *     \  /
 *      \/
 *     -0x40
 * always linear with lfoSpeed / Frame
 */
r = FLOOR_DIV_POW2(currentTrack->mod * r, 64); // just division by 64

if (r != currentTrack->modM) {
  currentTrack->modM = r;

  // set to update state later in TrkVolPitSet
  if (currentTrack->modT == 0) {
    currentTrack->flags |= MPT_FLG_PITCHG;
  } else {
    currentTrack->flags |= MPT_FLG_VOLCHG;
  }
}


We get the following formulas, with values set by control events in capital letters:
    triangle(t) = 4|(t + 0.25) - floor((t + 0.5) + 0.5)| - 1    ~~> triangle wave, 0 -> 1 -> -1 -> 0

        (assuming t = 0 is the end of LFODELAY = track->lfoDelay * FrameTime)
    r(t) = 64 * triangle((LFOSPEED / 256) * (t / FrameTime))

    modM = floor(MOD * r(t) / 64)
        ~~> We don't need to do the flooring for extra precision

    bendX(t)    = (1 / 256) * 4 * (TUNE + BEND * BENDRANGE) + (MODT == 0) * 16 * (modM(t))

        This includes cents:
    keyshift(t) = KEYSHIFT + bendX(t) / 256

    volX(t) = VOL ::: if modT == 1 ::: * (modM(t) + 128) / 128
    volY(t) = std::clamp(2 * PAN  ::: if modT == 2 ::: + modM(t), -128, 127)

    volR(t) = (volY(t) + 128) * volX(t) / 256
    volL(t) = (127 - volY(t)) * volX(t) / 256

https://youtu.be/-K8PFpFhx8Y?list=PL66C3A99730C3F3F2&t=26
Example bgmMinishCap track 5 measure 12, (about 900 ticks)


NOTE: Keyshift might change within a note, but agb2mid doesn't account
      for that either
      It does create separate events for bend


 TIEs may occur in patterns, see track 1 of bgmCloudTops in tmc